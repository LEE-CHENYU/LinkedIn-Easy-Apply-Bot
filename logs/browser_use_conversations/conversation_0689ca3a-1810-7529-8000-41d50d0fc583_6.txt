 system 
You are an AI agent designed to operate in an iterative loop to automate browser tasks. Your ultimate goal is accomplishing the task provided in <user_request>.

<intro>
You excel at following tasks:
1. Navigating complex websites and extracting precise information
2. Automating form submissions and interactive web actions
3. Gathering and saving information 
4. Using your filesystem effectively to decide what to keep in your context
5. Operate effectively in an agent loop
6. Efficiently performing diverse web tasks
</intro>

<language_settings>
- Default working language: **English**
- Use the language specified by user in messages as the working language
</language_settings>

<input>
At every step, your input will consist of: 
1. <agent_history>: A chronological event stream including your previous actions and their results.
2. <agent_state>: Current <user_request>, summary of <file_system>, <todo_contents>, and <step_info>.
3. <browser_state>: Current URL, open tabs, interactive elements indexed for actions, and visible page content.
4. <browser_vision>: Screenshot of the browser with bounding boxes around interactive elements.
5. <read_state> This will be displayed only if your previous action was extract_structured_data or read_file. This data is only shown in the current step.
</input>

<agent_history>
Agent history will be given as a list of step information as follows:

<step_{step_number}>:
Evaluation of Previous Step: Assessment of last action
Memory: Your memory of this step
Next Goal: Your goal for this step
Action Results: Your actions and their results
</step_{step_number}>

and system messages wrapped in <sys> tag.
</agent_history>

<user_request>
USER REQUEST: This is your ultimate objective and always remains visible.
- This has the highest priority. Make the user happy.
- If the user request is very specific - then carefully follow each step and dont skip or hallucinate steps.
- If the task is open ended you can plan yourself how to get it done.
</user_request>

<browser_state>
1. Browser State will be given as:

Current URL: URL of the page you are currently viewing.
Open Tabs: Open tabs with their indexes.
Interactive Elements: All interactive elements will be provided in format as [index]<type>text</type> where
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description

Examples:
[33]<div>User form</div>
\t*[35]<button aria-label='Submit form'>Submit</button>

Note that:
- Only elements with numeric indexes in [] are interactive
- (stacked) indentation (with \t) is important and means that the element is a (html) child of the element above (with a lower index)
- Elements tagged with `*[` are the new clickable elements that appeared on the website since the last step - if url has not changed.
- Pure text elements without [] are not interactive.
</browser_state>

<browser_vision>
You will be optionally provided with a screenshot of the browser with bounding boxes. This is your GROUND TRUTH: reason about the image in your thinking to evaluate your progress.
Bounding box labels correspond to element indexes - analyze the image to make sure you click on correct elements.
</browser_vision>

<browser_rules>
Strictly follow these rules while using the browser and navigating the web:
- Only interact with elements that have a numeric [index] assigned.
- Only use indexes that are explicitly provided.
- If research is needed, open a **new tab** instead of reusing the current one.
- If the page changes after, for example, an input text action, analyse if you need to interact with new elements, e.g. selecting the right option from the list.
- By default, only elements in the visible viewport are listed. Use scrolling tools if you suspect relevant content is offscreen which you need to interact with. Scroll ONLY if there are more pixels below or above the page. The extract_structured_data action gets the full loaded page content.
- You can scroll by a specific number of pages using the num_pages parameter (e.g., 0.5 for half page, 2.0 for two pages).
- If a captcha appears, attempt solving it if possible. If not, use fallback strategies (e.g., alternative site, backtrack).
- If expected elements are missing, try refreshing, scrolling, or navigating back.
- If the page is not fully loaded, use the wait action.
- You can call extract_structured_data on specific pages to gather structured semantic information from the entire page, including parts not currently visible. The results of extract_structured_data are automatically saved to the file system.
- Call extract_structured_data only if the information you are looking for is not visible in your <browser_state> otherwise always just use the needed text from the <browser_state>.
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.
- If the <user_request> includes specific page information such as product type, rating, price, location, etc., try to apply filters to be more efficient.
- The <user_request> is the ultimate goal. If the user specifies explicit steps, they have always the highest priority.
- If you input_text into a field, you might need to press enter, click the search button, or select from dropdown for completion.
- Don't login into a page if you don't have to. Don't login if you don't have the credentials. 
- There are 2 types of tasks always first think which type of request you are dealing with:
1. Very specific step by step instructions:
- Follow them as very precise and don't skip steps. Try to complete everything as requested.
2. Open ended tasks. Plan yourself, be creative in achieving them.
- If you get stuck e.g. with logins or captcha in open-ended tasks you can re-evaluate the task and try alternative ways, e.g. sometimes accidentally login pops up, even though there some part of the page is accessible or you get some information via web search.
- If you reach a PDF viewer, the file is automatically downloaded and you can see its path in <available_file_paths>. You can either read the file or scroll in the page to see more.
</browser_rules>

<file_system>
- You have access to a persistent file system which you can use to track progress, store results, and manage long tasks.
- Your file system is initialized with a `todo.md`: Use this to keep a checklist for known subtasks. Use `replace_file_str` tool to update markers in `todo.md` as first action whenever you complete an item. This file should guide your step-by-step execution when you have a long running task.
- If you are writing a `csv` file, make sure to use double quotes if cell elements contain commas.
- If the file is too large, you are only given a preview of your file. Use `read_file` to see the full content if necessary.
- If exists, <available_file_paths> includes files you have downloaded or uploaded by the user. You can only read or upload these files but you don't have write access.
- If the task is really long, initialize a `results.md` file to accumulate your results.
- DO NOT use the file system if the task is less than 10 steps!
</file_system>

<task_completion_rules>
You must call the `done` action in one of two cases:
- When you have fully completed the USER REQUEST.
- When you reach the final allowed step (`max_steps`), even if the task is incomplete.
- If it is ABSOLUTELY IMPOSSIBLE to continue.

The `done` action is your opportunity to terminate and share your findings with the user.
- Set `success` to `true` only if the full USER REQUEST has been completed with no missing components.
- If any part of the request is missing, incomplete, or uncertain, set `success` to `false`.
- You can use the `text` field of the `done` action to communicate your findings and `files_to_display` to send file attachments to the user, e.g. `["results.md"]`.
- Combine `text` and `files_to_display` to provide a coherent reply to the user and fulfill the USER REQUEST.
- You are ONLY ALLOWED to call `done` as a single action. Don't call it together with other actions.
- If the user asks for specified format, such as "return JSON with following structure", "return a list of format...", MAKE sure to use the right format in your answer.
- If the user asks for a structured output, your `done` action's schema will be modified. Take this schema into account when solving the task!
</task_completion_rules>

<action_rules>
- You are allowed to use a maximum of 10 actions per step.

If you are allowed multiple actions, you can specify multiple actions in the list to be executed sequentially (one after another).
- If the page changes after an action, the sequence is interrupted and you get the new state. You can see this in your agent history when this happens.
</action_rules>


<efficiency_guidelines>
**IMPORTANT: Be More Efficient with Multi-Action Outputs**

Maximize efficiency by combining related actions in one step instead of doing them separately:

**Highly Recommended Action Combinations:**
- `click_element_by_index` + `extract_structured_data` → Click element and immediately extract information 
- `go_to_url` + `extract_structured_data` → Navigate and extract data in one step
- `input_text` + `click_element_by_index` → Fill form field and submit/search in one step
- `click_element_by_index` + `input_text` → Click input field and fill it immediately
- `click_element_by_index` + `click_element_by_index` → Navigate through multi-step flows (when safe)
- File operations + browser actions 

**Examples of Efficient Combinations:**
```json
"action": [
  {"click_element_by_index": {"index": 15}},
  {"extract_structured_data": {"query": "Extract the first 3 headlines", "extract_links": false}}
]
```

```json
"action": [
  {"input_text": {"index": 23, "text": "laptop"}},
  {"click_element_by_index": {"index": 24}}
]
```

```json
"action": [
  {"go_to_url": {"url": "https://example.com/search"}},
  {"extract_structured_data": {"query": "product listings", "extract_links": false}}
]
```

**When to Use Single Actions:**
- When next action depends on previous action's specific result


**Efficiency Mindset:** Think "What's the logical sequence of actions I would do?" and group them together when safe.
</efficiency_guidelines>

<reasoning_rules>
You must reason explicitly and systematically at every step in your `thinking` block. 

Exhibit the following reasoning patterns to successfully achieve the <user_request>:
- Reason about <agent_history> to track progress and context toward <user_request>.
- Analyze the most recent "Next Goal" and "Action Result" in <agent_history> and clearly state what you previously tried to achieve.
- Analyze all relevant items in <agent_history>, <browser_state>, <read_state>, <file_system>, <read_state> and the screenshot to understand your state.
- Explicitly judge success/failure/uncertainty of the last action.
- If todo.md is empty and the task is multi-step, generate a stepwise plan in todo.md using file tools.
- Analyze `todo.md` to guide and track your progress. 
- If any todo.md items are finished, mark them as complete in the file.
- Analyze whether you are stuck, e.g. when you repeat the same actions multiple times without any progress. Then consider alternative approaches e.g. scrolling for more context or send_keys to interact with keys directly or different pages.
- Analyze the <read_state> where one-time information are displayed due to your previous action. Reason about whether you want to keep this information in memory and plan writing them into a file if applicable using the file tools.
- If you see information relevant to <user_request>, plan saving the information into a file.
- Before writing data into a file, analyze the <file_system> and check if the file already has some content to avoid overwriting.
- Decide what concise, actionable context should be stored in memory to inform future reasoning.
- When ready to finish, state you are preparing to call done and communicate completion/results to the user.
- Before done, use read_file to verify file contents intended for user output.
- Always reason about the <user_request>. Make sure to carefully analyze the specific steps and information required. E.g. specific filters, specific form fields, specific information to search. Make sure to always compare the current trajactory with the user request and think carefully if thats how the user requested it.
</reasoning_rules>

<examples>
Here are examples of good output patterns. Use them as reference but never copy them directly.

<todo_examples>
  "write_file": {
    "file_name": "todo.md",
    "content": "# ArXiv CS.AI Recent Papers Collection Task\n\n## Goal: Collect metadata for 20 most recent papers\n\n## Tasks:\n- [ ] Navigate to https://arxiv.org/list/cs.AI/recent\n- [ ] Initialize papers.md file for storing paper data\n- [ ] Collect paper 1/20: The Automated LLM Speedrunning Benchmark\n- [x] Collect paper 2/20: AI Model Passport\n- [ ] Collect paper 3/20: Embodied AI Agents\n- [ ] Collect paper 4/20: Conceptual Topic Aggregation\n- [ ] Collect paper 5/20: Artificial Intelligent Disobedience\n- [ ] Continue collecting remaining papers from current page\n- [ ] Navigate through subsequent pages if needed\n- [ ] Continue until 20 papers are collected\n- [ ] Verify all 20 papers have complete metadata\n- [ ] Final review and completion"
  }
</todo_examples>

<evaluation_examples>
- Positive Examples:
"evaluation_previous_goal": "Successfully navigated to the product page and found the target information. Verdict: Success"
"evaluation_previous_goal": "Clicked the login button and user authentication form appeared. Verdict: Success"
- Negative Examples:
"evaluation_previous_goal": "Failed to input text into the search bar as I cannot see it in the image. Verdict: Failure"
"evaluation_previous_goal": "Clicked the submit button with index 15 but the form was not submitted successfully. Verdict: Failure"
</evaluation_examples>

<memory_examples>
"memory": "Visited 2 of 5 target websites. Collected pricing data from Amazon ($39.99) and eBay ($42.00). Still need to check Walmart, Target, and Best Buy for the laptop comparison."
"memory": "Found many pending reports that need to be analyzed in the main page. Successfully processed the first 2 reports on quarterly sales data and moving on to inventory analysis and customer feedback reports."
</memory_examples>

<next_goal_examples>
"next_goal": "Click on the 'Add to Cart' button (index 23) to proceed with the purchase flow."
"next_goal": "Scroll down to find more product listings and extract details from the next 5 items on the page."
</next_goal_examples>
</examples>

<output>
You must ALWAYS respond with a valid JSON in this exact format:

{
  "thinking": "A structured <think>-style reasoning block that applies the <reasoning_rules> provided above.",
  "evaluation_previous_goal": "One-sentence analysis of your last action. Clearly state success, failure, or uncertain.",
  "memory": "1-3 sentences of specific memory of this step and overall progress. You should put here everything that will help you track progress in future steps. Like counting pages visited, items found, etc.",
  "next_goal": "State the next immediate goals and actions to achieve it, in one clear sentence."
  "action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]
}

Action list should NEVER be empty.
</output>


 user 
<agent_history>
<sys>
Agent initialized
</sys>
<step_1>
Evaluation of Previous Step: Success — I identified the application modal and located the prioritized 'Next' button (index 8) to advance the form.
Memory: Found an 'Apply to CERRET' modal with contact info prefilled (email cl4183@columbia.edu, phone +1 9295388280). todo.md was empty and will be initialized with a multi-step plan. Next button index is 8.
Next Goal: Initialize a todo.md with the application plan and click the 'Next' button (index 8) to continue to the next application section.
Action Results:
Action 1/2: Data written to file todo.md successfully.
Action 2/2: Clicked button with index 8: Next
</step_1>
<step_2>
Evaluation of Previous Step: Success — todo.md was initialized previously and the modal's Next button (index 8 in the prior step) was clicked to enter the application; ready to continue by clicking the current Next button.
Memory: Application modal 'Apply to CERRET' is open at 25% progress; resumes are available and one is selected. Important navigation elements: Dismiss (index 0), Back (12), Next (13). todo.md with step plan exists and will guide subsequent steps.
Next Goal: Click the Next button (index 13) to advance to the next section of the LinkedIn Easy Apply form (work authorization / eligibility questions).
Action Results:
Action 1/1: Clicked button with index 13: Next
</step_2>
<step_3>
Evaluation of Previous Step: Success — previous step clicked the Next button (index 13) and reached the modal at 50%; now ready to advance further by clicking Next in the current modal.
Memory: Application modal 'Apply to CERRET' open at 50% progress. Contact info was prefilled earlier and todo.md exists with the step plan. Visible interactive elements now: Dismiss [0], Back [3], Next [4].
Next Goal: Click the Next button (index 4) to proceed to the work authorization / eligibility questions section and then handle the new page's fields according to the user's rules.
Action Results:
Action 1/1: Clicked button with index 4: Next
</step_3>
<step_4>
Evaluation of Previous Step: Success — the application modal is at 75% with the required background-check question visible; ready to answer and proceed to Review.
Memory: Reached 'Apply to CERRET' modal at 75% with background-check radio buttons (indexes 2/3) and three select dropdowns (indexes 5,7,9). Navigation buttons: Back (11) and Review (12). todo.md lists filling authorization and experience next.
Next Goal: Select 'Yes' for the background check (index 2) per user preference, then click the Review button (index 12) to advance the application.
Action Results:
Action 1/2: Clicked button with index 2: Yes
Action 2/2: Clicked button with index 12: Review
</step_4>
<step_5>
Evaluation of Previous Step: Success — previous step selected 'Yes' for background check and clicked Review/advanced to 75% of the modal.
Memory: Modal at 75% with three required dropdowns (indexes 5,7,9) showing validation errors; background-check already set to Yes. todo.md exists and guides remaining steps.
Next Goal: Select 'Yes' for the three required dropdowns (indexes 5, 7, 9) and then click the Review button (index 12) to continue to the review step.
Action Results:
Action 1/4: Selected option 'Yes'
Action 2/4: Selected option 'Yes'
Action 3/4: Selected option 'Yes'
Action 4/4: Clicked button with index 12: Review
</step_5>
</agent_history>
<agent_state>
<user_request>
You are helping fill out a LinkedIn job application for Social Media Manager and Ads at Unknown. 

⚠️ MOST IMPORTANT: Always prioritize clicking Next, Continue, Review, and Submit buttons to progress through the form. Don't get stuck on one page - keep moving forward!

⚠️ CRITICAL: If you see "Apply to [Company Name]" modal window (like "Apply to TikTok"), this is an application form. Either complete it by clicking Submit Application, or if you can't proceed, look for the X button in the top-right corner to close it.

PERSONAL INFORMATION:
- First Name: Chenyu
- Last Name: Li
- Phone: 9295388280
- Email: Use any existing email field values
- Address: 601 W 110th St
- City: New York, New York
- State: New York
- ZIP: 10025
- LinkedIn: linkedin.com/in/chenyu-li-50a81b156
- Website: https://github.com/LEE-CHENYU

WORK AUTHORIZATION:
- Legally authorized to work in US: Yes
- Require visa sponsorship: Yes
- Have driver's license: Yes
- Can start immediately: Yes
- Comfortable commuting: Yes
- Background check: Yes

EDUCATION:
- GPA: 3.7
- Completed degrees: High School Diploma, Bachelor's Degree, Master's Degree

EXPERIENCE (in years):
Technology Skills: {'python': 5, 'default': 1}
Industry Experience: {'Accounting/Auditing': 1, 'Administrative': 0, 'Advertising': 0, 'Analyst': 1, 'Art/Creative': 0}
Default experience for unlisted skills: 1 years

LANGUAGES:
{'english': 'Professional', 'chinese': 'Native or bilingual', 'japanese': 'Professional'}

IMPORTANT RULES:
1. For "years of experience" questions, match the technology/skill mentioned to the values above
2. For yes/no questions, use the work authorization values above
3. For dropdown selections, choose the most appropriate option based on the context
4. For text fields without specific matches, use reasonable defaults
5. For file uploads, skip them (they should be handled separately)
6. For EEO questions (gender, race, veteran status), select "Prefer not to answer" or "Decline to answer"

BUTTON PRIORITY (ALWAYS DO THIS):
7. PRIORITIZE clicking these buttons when visible:
   - "Next" button - click immediately when visible to move forward
   - "Review" or "Review Application" button - click to review before submission
   - "Submit" or "Submit Application" button - click when all fields are filled
   - "Continue" button - click to proceed through multi-step forms
8. After filling each section, ALWAYS look for and click Next/Continue/Review buttons
9. Don't stay on the same page - always progress forward by clicking navigation buttons
10. If you see "Submit Application", only click it if all required fields are properly filled

CRITICAL BUTTON DETECTION AND PRIORITY:
11. ALWAYS scroll down to check for navigation buttons at the bottom of the page
12. Many LinkedIn forms have buttons stuck at the bottom that are not visible without scrolling
13. PRIORITY ORDER for clicking buttons:
    a. First priority: "Next" button (to move to next section)
    b. Second priority: "Continue" button (to proceed)
    c. Third priority: "Review" or "Review Application" (before final submission)
    d. Fourth priority: "Submit" or "Submit Application" (final step)
14. After filling ANY form section, immediately look for and click Next/Continue
15. If you cannot find navigation buttons, scroll down completely and look again
16. Don't wait - click navigation buttons as soon as they're available

SCROLLING INSTRUCTIONS:
- Always scroll down to reveal hidden form elements and buttons
- Some forms have multiple sections that only become visible after scrolling
- Check both top and bottom of the page for navigation buttons
- If stuck, try scrolling to reveal more content or buttons

APPLICATION MODAL HANDLING ("Apply to [Company]" windows):
17. When you see a modal with "Apply to TikTok" or similar header:
    - This is the main application form window
    - Complete the form by filling fields and clicking Next/Submit
    - If you cannot proceed or get stuck:
      * Look for the X button in the top-right corner of the modal
      * The dismiss button is usually .artdeco-modal__dismiss
      * Click it to close the modal and move to next job
    - Don't leave modals open - either complete or close them

STUCK STATE RECOVERY:
18. If completely stuck on any form or modal:
    - PRIORITY: Click the X button in top-right corner of modal
    - Look for Close, Cancel, Dismiss, or X buttons
    - Press Escape key multiple times
    - Navigate away if nothing else works
    - Don't waste time - close stuck forms and continue

Please fill out this LinkedIn job application form step by step, following these instructions carefully.
</user_request>
<file_system>

</file_system>
<todo_contents>
# LinkedIn Easy Apply - Social Media Manager & Ads (Unknown / CERRET)\n\n## Goal\nComplete the LinkedIn Easy Apply for Social Media Manager and Ads following user rules.\n\n## Steps\n- [ ] Step 1: Fill contact info (verify email/phone) — current modal.\n- [ ] Step 2: Click Next to proceed to work authorization / eligibility questions.\n- [ ] Step 3: Fill work authorization answers (authorized: Yes, need sponsorship: Yes, driver's license: Yes, start immediately: Yes, comfortable commuting: Yes, background check: Yes).\n- [ ] Step 4: Provide education details (GPA 3.7; High School Diploma, Bachelor's, Master's).\n- [ ] Step 5: Fill technology and industry years of experience (python:5, default:1; mapping for listed industries).\n- [ ] Step 6: Fill language proficiencies (English: Professional, Chinese: Native or bilingual, Japanese: Professional).\n- [ ] Step 7: Skip file uploads.\n- [ ] Step 8: For EEO questions, select 'Prefer not to answer' or 'Decline to answer'.\n- [ ] Step 9: Review application and correct any missing required fields.\n- [ ] Step 10: Submit Application only when all required fields are filled; otherwise close modal and report issues.\n\n## Notes\n- Always prioritize clicking Next/Continue/Review/Submit buttons to progress.\n- If modal gets stuck, close using the X (top-right) or press Escape and move to next job.\n- Use provided personal info: Chenyu Li, 9295388280, 601 W 110th St, New York, NY 10025; LinkedIn and website links available as defaults.\n

</todo_contents>
<step_info>
Step 6 of 15 max possible steps
Current date and time: 2025-08-13 10:40
</step_info>
</agent_state>
<browser_state>
Current tab: 0
Available tabs:
Tab 0: https://www.linkedin.com/jobs/search/?currentJobId=4281245198&distance=100&f_AL=true&f_E=2%2C3&f_JT=F%2CP&f_TPR=r2592000&keywords=Strategist&location=Seattle&start=25 - (7) Strategist Jobs in Seattle

Page info: 1920x1080px viewport, 1920x1080px total page size, 0.0 pages above, 0.0 pages below, 1.0 total pages, at 0% of page
Interactive elements from top layer of the current page inside the viewport:
[Start of page]
[0]<button aria-label=Dismiss />
Apply to CERRET
Current value: 100
100%
Review your application
The employer will also receive a copy of your profile.
Contact info
*[1]<button aria-label=Edit Contact in... type=button>Edit />
Chenyu LI
AI Infra Development
New York, New York, United States
Email address
cl4183@columbia.edu
Phone country code
United States (+1)
Mobile phone number
9295388280
Mark this job as a top choice
Applicants who let hirers know when a job is their top choice are 43% more likely to hear back.
*[2]<label >Mark job as a top choice />
You can mark 3 jobs as top choice this month
Resume
*[3]<button aria-label=Edit Resume type=button>Edit />
Be sure to include an updated resume in DOC, DOCX or PDF format (less than 2MB).
Chenyu Li Resume_0626.pdf
Last used on 8/13/2025
*[4]<button aria-label=View document>View />
Additional Questions
*[5]<button aria-label=Edit Additional... type=button>Edit />
[End of page]
</browser_state>

Current screenshot:

 RESPONSE
{
  "thinking": "Reviewing agent history: steps 1-5 show progress through the LinkedIn Easy Apply modal; we are currently at the Review step (100%) with contact info displayed. The last action set the required answers for background checks and dropdowns and proceeded to Review. Current visible interactive elements in this modal: Dismiss (index 0), Edit Contact (1), Mark job as top choice checkbox/label (2), Edit Resume (3), View document (4), and Edit Additional Questions (5). The user's instructions repeatedly emphasize prioritizing navigation buttons (Next/Continue/Review/Submit) to progress. On this Review page there is no explicit Next/Submit visible in the provided interactive elements, but 'Additional Questions' likely contains the remaining required items and clicking it should reveal further sections or the final Submit/Review button. Therefore the correct next step is to click the 'Edit Additional...' element (index 5) to open additional questions and continue advancing the application. I will click index 5. I judge this action likely to succeed because the element is present in the current interactive elements and matches the user's instruction to advance the form. If new navigation buttons appear after that, I'll continue following the BUTTON PRIORITY rules to click Next/Review/Submit as soon as visible.",
  "evaluation_previous_goal": "Success \u2014 the modal is at the Review stage with contact info visible and previous dropdowns set; ready to open Additional Questions to continue.",
  "memory": "At Review (100%) step of the 'Apply to CERRET' modal. Contact info is prefilled (email cl4183@columbia.edu, phone 9295388280). Interactive elements available include Edit Additional Questions (index 5) which will be opened next.",
  "next_goal": "Click the 'Edit Additional Questions' button (index 5) to open the additional questions and continue filling required fields, then prioritize clicking any Next/Review/Submit buttons that appear.",
  "action": [
    {
      "click_element_by_index": {
        "index": 5
      }
    }
  ]
}