 system 
You are an AI agent designed to operate in an iterative loop to automate browser tasks. Your ultimate goal is accomplishing the task provided in <user_request>.

<intro>
You excel at following tasks:
1. Navigating complex websites and extracting precise information
2. Automating form submissions and interactive web actions
3. Gathering and saving information 
4. Using your filesystem effectively to decide what to keep in your context
5. Operate effectively in an agent loop
6. Efficiently performing diverse web tasks
</intro>

<language_settings>
- Default working language: **English**
- Use the language specified by user in messages as the working language
</language_settings>

<input>
At every step, your input will consist of: 
1. <agent_history>: A chronological event stream including your previous actions and their results.
2. <agent_state>: Current <user_request>, summary of <file_system>, <todo_contents>, and <step_info>.
3. <browser_state>: Current URL, open tabs, interactive elements indexed for actions, and visible page content.
4. <browser_vision>: Screenshot of the browser with bounding boxes around interactive elements.
5. <read_state> This will be displayed only if your previous action was extract_structured_data or read_file. This data is only shown in the current step.
</input>

<agent_history>
Agent history will be given as a list of step information as follows:

<step_{step_number}>:
Evaluation of Previous Step: Assessment of last action
Memory: Your memory of this step
Next Goal: Your goal for this step
Action Results: Your actions and their results
</step_{step_number}>

and system messages wrapped in <sys> tag.
</agent_history>

<user_request>
USER REQUEST: This is your ultimate objective and always remains visible.
- This has the highest priority. Make the user happy.
- If the user request is very specific - then carefully follow each step and dont skip or hallucinate steps.
- If the task is open ended you can plan yourself how to get it done.
</user_request>

<browser_state>
1. Browser State will be given as:

Current URL: URL of the page you are currently viewing.
Open Tabs: Open tabs with their indexes.
Interactive Elements: All interactive elements will be provided in format as [index]<type>text</type> where
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description

Examples:
[33]<div>User form</div>
\t*[35]<button aria-label='Submit form'>Submit</button>

Note that:
- Only elements with numeric indexes in [] are interactive
- (stacked) indentation (with \t) is important and means that the element is a (html) child of the element above (with a lower index)
- Elements tagged with `*[` are the new clickable elements that appeared on the website since the last step - if url has not changed.
- Pure text elements without [] are not interactive.
</browser_state>

<browser_vision>
You will be optionally provided with a screenshot of the browser with bounding boxes. This is your GROUND TRUTH: reason about the image in your thinking to evaluate your progress.
Bounding box labels correspond to element indexes - analyze the image to make sure you click on correct elements.
</browser_vision>

<browser_rules>
Strictly follow these rules while using the browser and navigating the web:
- Only interact with elements that have a numeric [index] assigned.
- Only use indexes that are explicitly provided.
- If research is needed, open a **new tab** instead of reusing the current one.
- If the page changes after, for example, an input text action, analyse if you need to interact with new elements, e.g. selecting the right option from the list.
- By default, only elements in the visible viewport are listed. Use scrolling tools if you suspect relevant content is offscreen which you need to interact with. Scroll ONLY if there are more pixels below or above the page. The extract_structured_data action gets the full loaded page content.
- You can scroll by a specific number of pages using the num_pages parameter (e.g., 0.5 for half page, 2.0 for two pages).
- If a captcha appears, attempt solving it if possible. If not, use fallback strategies (e.g., alternative site, backtrack).
- If expected elements are missing, try refreshing, scrolling, or navigating back.
- If the page is not fully loaded, use the wait action.
- You can call extract_structured_data on specific pages to gather structured semantic information from the entire page, including parts not currently visible. The results of extract_structured_data are automatically saved to the file system.
- Call extract_structured_data only if the information you are looking for is not visible in your <browser_state> otherwise always just use the needed text from the <browser_state>.
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.
- If the <user_request> includes specific page information such as product type, rating, price, location, etc., try to apply filters to be more efficient.
- The <user_request> is the ultimate goal. If the user specifies explicit steps, they have always the highest priority.
- If you input_text into a field, you might need to press enter, click the search button, or select from dropdown for completion.
- Don't login into a page if you don't have to. Don't login if you don't have the credentials. 
- There are 2 types of tasks always first think which type of request you are dealing with:
1. Very specific step by step instructions:
- Follow them as very precise and don't skip steps. Try to complete everything as requested.
2. Open ended tasks. Plan yourself, be creative in achieving them.
- If you get stuck e.g. with logins or captcha in open-ended tasks you can re-evaluate the task and try alternative ways, e.g. sometimes accidentally login pops up, even though there some part of the page is accessible or you get some information via web search.
- If you reach a PDF viewer, the file is automatically downloaded and you can see its path in <available_file_paths>. You can either read the file or scroll in the page to see more.
</browser_rules>

<file_system>
- You have access to a persistent file system which you can use to track progress, store results, and manage long tasks.
- Your file system is initialized with a `todo.md`: Use this to keep a checklist for known subtasks. Use `replace_file_str` tool to update markers in `todo.md` as first action whenever you complete an item. This file should guide your step-by-step execution when you have a long running task.
- If you are writing a `csv` file, make sure to use double quotes if cell elements contain commas.
- If the file is too large, you are only given a preview of your file. Use `read_file` to see the full content if necessary.
- If exists, <available_file_paths> includes files you have downloaded or uploaded by the user. You can only read or upload these files but you don't have write access.
- If the task is really long, initialize a `results.md` file to accumulate your results.
- DO NOT use the file system if the task is less than 10 steps!
</file_system>

<task_completion_rules>
You must call the `done` action in one of two cases:
- When you have fully completed the USER REQUEST.
- When you reach the final allowed step (`max_steps`), even if the task is incomplete.
- If it is ABSOLUTELY IMPOSSIBLE to continue.

The `done` action is your opportunity to terminate and share your findings with the user.
- Set `success` to `true` only if the full USER REQUEST has been completed with no missing components.
- If any part of the request is missing, incomplete, or uncertain, set `success` to `false`.
- You can use the `text` field of the `done` action to communicate your findings and `files_to_display` to send file attachments to the user, e.g. `["results.md"]`.
- Combine `text` and `files_to_display` to provide a coherent reply to the user and fulfill the USER REQUEST.
- You are ONLY ALLOWED to call `done` as a single action. Don't call it together with other actions.
- If the user asks for specified format, such as "return JSON with following structure", "return a list of format...", MAKE sure to use the right format in your answer.
- If the user asks for a structured output, your `done` action's schema will be modified. Take this schema into account when solving the task!
</task_completion_rules>

<action_rules>
- You are allowed to use a maximum of 10 actions per step.

If you are allowed multiple actions, you can specify multiple actions in the list to be executed sequentially (one after another).
- If the page changes after an action, the sequence is interrupted and you get the new state. You can see this in your agent history when this happens.
</action_rules>


<efficiency_guidelines>
**IMPORTANT: Be More Efficient with Multi-Action Outputs**

Maximize efficiency by combining related actions in one step instead of doing them separately:

**Highly Recommended Action Combinations:**
- `click_element_by_index` + `extract_structured_data` → Click element and immediately extract information 
- `go_to_url` + `extract_structured_data` → Navigate and extract data in one step
- `input_text` + `click_element_by_index` → Fill form field and submit/search in one step
- `click_element_by_index` + `input_text` → Click input field and fill it immediately
- `click_element_by_index` + `click_element_by_index` → Navigate through multi-step flows (when safe)
- File operations + browser actions 

**Examples of Efficient Combinations:**
```json
"action": [
  {"click_element_by_index": {"index": 15}},
  {"extract_structured_data": {"query": "Extract the first 3 headlines", "extract_links": false}}
]
```

```json
"action": [
  {"input_text": {"index": 23, "text": "laptop"}},
  {"click_element_by_index": {"index": 24}}
]
```

```json
"action": [
  {"go_to_url": {"url": "https://example.com/search"}},
  {"extract_structured_data": {"query": "product listings", "extract_links": false}}
]
```

**When to Use Single Actions:**
- When next action depends on previous action's specific result


**Efficiency Mindset:** Think "What's the logical sequence of actions I would do?" and group them together when safe.
</efficiency_guidelines>

<reasoning_rules>
You must reason explicitly and systematically at every step in your `thinking` block. 

Exhibit the following reasoning patterns to successfully achieve the <user_request>:
- Reason about <agent_history> to track progress and context toward <user_request>.
- Analyze the most recent "Next Goal" and "Action Result" in <agent_history> and clearly state what you previously tried to achieve.
- Analyze all relevant items in <agent_history>, <browser_state>, <read_state>, <file_system>, <read_state> and the screenshot to understand your state.
- Explicitly judge success/failure/uncertainty of the last action.
- If todo.md is empty and the task is multi-step, generate a stepwise plan in todo.md using file tools.
- Analyze `todo.md` to guide and track your progress. 
- If any todo.md items are finished, mark them as complete in the file.
- Analyze whether you are stuck, e.g. when you repeat the same actions multiple times without any progress. Then consider alternative approaches e.g. scrolling for more context or send_keys to interact with keys directly or different pages.
- Analyze the <read_state> where one-time information are displayed due to your previous action. Reason about whether you want to keep this information in memory and plan writing them into a file if applicable using the file tools.
- If you see information relevant to <user_request>, plan saving the information into a file.
- Before writing data into a file, analyze the <file_system> and check if the file already has some content to avoid overwriting.
- Decide what concise, actionable context should be stored in memory to inform future reasoning.
- When ready to finish, state you are preparing to call done and communicate completion/results to the user.
- Before done, use read_file to verify file contents intended for user output.
- Always reason about the <user_request>. Make sure to carefully analyze the specific steps and information required. E.g. specific filters, specific form fields, specific information to search. Make sure to always compare the current trajactory with the user request and think carefully if thats how the user requested it.
</reasoning_rules>

<examples>
Here are examples of good output patterns. Use them as reference but never copy them directly.

<todo_examples>
  "write_file": {
    "file_name": "todo.md",
    "content": "# ArXiv CS.AI Recent Papers Collection Task\n\n## Goal: Collect metadata for 20 most recent papers\n\n## Tasks:\n- [ ] Navigate to https://arxiv.org/list/cs.AI/recent\n- [ ] Initialize papers.md file for storing paper data\n- [ ] Collect paper 1/20: The Automated LLM Speedrunning Benchmark\n- [x] Collect paper 2/20: AI Model Passport\n- [ ] Collect paper 3/20: Embodied AI Agents\n- [ ] Collect paper 4/20: Conceptual Topic Aggregation\n- [ ] Collect paper 5/20: Artificial Intelligent Disobedience\n- [ ] Continue collecting remaining papers from current page\n- [ ] Navigate through subsequent pages if needed\n- [ ] Continue until 20 papers are collected\n- [ ] Verify all 20 papers have complete metadata\n- [ ] Final review and completion"
  }
</todo_examples>

<evaluation_examples>
- Positive Examples:
"evaluation_previous_goal": "Successfully navigated to the product page and found the target information. Verdict: Success"
"evaluation_previous_goal": "Clicked the login button and user authentication form appeared. Verdict: Success"
- Negative Examples:
"evaluation_previous_goal": "Failed to input text into the search bar as I cannot see it in the image. Verdict: Failure"
"evaluation_previous_goal": "Clicked the submit button with index 15 but the form was not submitted successfully. Verdict: Failure"
</evaluation_examples>

<memory_examples>
"memory": "Visited 2 of 5 target websites. Collected pricing data from Amazon ($39.99) and eBay ($42.00). Still need to check Walmart, Target, and Best Buy for the laptop comparison."
"memory": "Found many pending reports that need to be analyzed in the main page. Successfully processed the first 2 reports on quarterly sales data and moving on to inventory analysis and customer feedback reports."
</memory_examples>

<next_goal_examples>
"next_goal": "Click on the 'Add to Cart' button (index 23) to proceed with the purchase flow."
"next_goal": "Scroll down to find more product listings and extract details from the next 5 items on the page."
</next_goal_examples>
</examples>

<output>
You must ALWAYS respond with a valid JSON in this exact format:

{
  "thinking": "A structured <think>-style reasoning block that applies the <reasoning_rules> provided above.",
  "evaluation_previous_goal": "One-sentence analysis of your last action. Clearly state success, failure, or uncertain.",
  "memory": "1-3 sentences of specific memory of this step and overall progress. You should put here everything that will help you track progress in future steps. Like counting pages visited, items found, etc.",
  "next_goal": "State the next immediate goals and actions to achieve it, in one clear sentence."
  "action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]
}

Action list should NEVER be empty.
</output>


 user 
<agent_history>
<sys>
Agent initialized
</sys>
<step_1>
Evaluation of Previous Step: No previous form actions performed in this session; current contact fields are present and Next is visible in the page elements. Verdict: Ready to proceed.
Memory: Contact info modal for TikTok application is open and displays Chenyu LI with first name 'Chenyu', last name 'Li', phone country code United States (+1), phone 9295388280, and email cl4183@columbia.edu; Next button index is 12. todo.md is empty and must be initialized.
Next Goal: Initialize the todo.md plan, scroll down to reveal hidden content/buttons, then click the 'Next' button to proceed to the next application page.
Action Results:
Action 1/3: Data written to file todo.md successfully.
Action 2/3: Scrolled down the page by one page
Action 3/3: Clicked button with index 12: Next
</step_1>
<step_2>
Evaluation of Previous Step: Previous step indicated readiness and that the modal was open with Next visible; verdict: Ready/success (modal present and Next available).
Memory: The application modal for TikTok is open on LinkedIn with two resumes available and 'Next' button at index 13; todo.md is initialized with the application plan.
Next Goal: Scroll to the bottom of the modal/page to reveal hidden buttons, then click the 'Next' button (index 13) to proceed to the Work Authorization/Profile section.
Action Results:
Action 1/2: Scrolled down the page by one page
Action 2/2: Clicked button with index 13: Next
</step_2>
<step_3>
Evaluation of Previous Step: Previous step goal was to click Next to proceed to Work Authorization — ready and modal present; verdict: Ready/success.
Memory: The TikTok Easy Apply modal is open on LinkedIn. The form's current 'Next' button is element index 4. todo.md is initialized with the application plan and contact info already noted earlier (email cl4183@columbia.edu).
Next Goal: After advancing the modal, identify Work Authorization/Profile questions and fill them per the user's provided values (work authorized: Yes, sponsorship required: No, driver's license: Yes, can start immediately: Yes, comfortable commuting: Yes, background check: Yes).
Action Results:
Action 1/2: Scrolled down the page by one page
Action 2/2: Clicked button with index 4: Next
</step_3>
<step_4>
Evaluation of Previous Step: Previous action advanced to Work Authorization; modal is present and ready to answer the questions — Verdict: Success.
Memory: Reached Work Authorization section of the TikTok Easy Apply modal. Ready to select 'Yes' for US work authorization and 'No' for visa sponsorship. todo.md plan exists and earlier contact info noted.
Next Goal: Select 'Yes' for legally authorized to work in the US and 'No' for visa sponsorship, then scroll to find and click the Review/Next button to advance to the next form section.
Action Results:
Action 1/5: Scrolled down the page by one page
Action 2/5: Clicked button with index 2: Yes
Action 3/5: Clicked button with index 6: No
Action 4/5: Scrolled down the page by one page
Action 5/5: Clicked button with index 9: Review
</step_4>
</agent_history>
<agent_state>
<user_request>
You are helping fill out a LinkedIn job application for TikTok Shop -  Creator Growth Strategist at Unknown. Please follow these guidelines:

PERSONAL INFORMATION:
- First Name: Chenyu
- Last Name: Li
- Phone: 9295388280
- Email: Use any existing email field values
- Address: 601 W 110th St
- City: New York, New York
- State: New York
- ZIP: 10025
- LinkedIn: linkedin.com/in/chenyu-li-50a81b156
- Website: https://github.com/LEE-CHENYU

WORK AUTHORIZATION:
- Legally authorized to work in US: Yes
- Require visa sponsorship: No
- Have driver's license: Yes
- Can start immediately: Yes
- Comfortable commuting: Yes
- Background check: Yes

EDUCATION:
- GPA: 3.7
- Completed degrees: High School Diploma, Bachelor's Degree, Master's Degree

EXPERIENCE (in years):
Technology Skills: {'python': 5, 'default': 1}
Industry Experience: {'Accounting/Auditing': 1, 'Administrative': 0, 'Advertising': 0, 'Analyst': 1, 'Art/Creative': 0}
Default experience for unlisted skills: 1 years

LANGUAGES:
{'english': 'Professional', 'chinese': 'Native or bilingual', 'japanese': 'Professional'}

IMPORTANT RULES:
1. For "years of experience" questions, match the technology/skill mentioned to the values above
2. For yes/no questions, use the work authorization values above
3. For dropdown selections, choose the most appropriate option based on the context
4. For text fields without specific matches, use reasonable defaults
5. For file uploads, skip them (they should be handled separately)
6. For EEO questions (gender, race, veteran status), select "Prefer not to answer" or "Decline to answer"
7. Always click "Continue" or "Next" buttons to proceed through the form
8. If you encounter "Submit Application", only click it if all required fields are properly filled

CRITICAL BUTTON DETECTION:
9. ALWAYS scroll down to the bottom of the page to check for Next/Continue/Submit/Review buttons
10. Many LinkedIn forms have buttons stuck at the bottom that are not visible without scrolling
11. Before looking for buttons, scroll to the bottom of the page first, then scroll back up if needed
12. If you cannot find Next/Continue buttons, scroll down completely and look again
13. Look for buttons with text like: "Next", "Continue", "Review", "Submit Application", "Review your application"

SCROLLING INSTRUCTIONS:
- Always scroll down to reveal hidden form elements and buttons
- Some forms have multiple sections that only become visible after scrolling
- Check both top and bottom of the page for navigation buttons
- If stuck, try scrolling to reveal more content or buttons

Please fill out this LinkedIn job application form step by step, following these instructions carefully.
</user_request>
<file_system>

</file_system>
<todo_contents>
# TikTok Shop - Creator Growth Strategist Application Plan

## Goal: Complete LinkedIn Easy Apply for TikTok Shop role using provided applicant data

## Steps:
- [ ] Verify and fill Contact Info (first name, last name, phone country code, phone number, email)
- [ ] Click Next to proceed to Work Authorization and Profile sections
- [ ] Fill Work Authorization questions (US work authorization, visa sponsorship, driver's license, start date, commute, background check)
- [ ] Fill Education (degrees completed, GPA)
- [ ] Fill Experience and Skills (map skills to years provided)
- [ ] Fill Languages
- [ ] Skip file uploads
- [ ] Answer EEO questions as "Prefer not to answer"
- [ ] Review all pages and click Submit Application only if all required fields are filled
- [ ] Save a summary of the application completion status

Notes:
- Use email value already present in the form (cl4183@columbia.edu)
- Always scroll to the bottom of each page to reveal Next/Continue/Submit buttons
- Do not attempt to upload files in this session


</todo_contents>
<step_info>
Step 5 of 15 max possible steps
Current date and time: 2025-08-12 19:51
</step_info>
</agent_state>
<browser_state>
Current tab: 0
Available tabs:
Tab 0: https://www.linkedin.com/jobs/search/?currentJobId=4273502635&distance=100&f_AL=true&f_E=2%2C3&f_JT=F%2CP&f_TPR=r2592000&keywords=Strategist&location=Seattle - (3) Strategist Jobs in Seattle

Page info: 1920x1080px viewport, 1920x1080px total page size, 0.0 pages above, 0.0 pages below, 1.0 total pages, at 0% of page
Interactive elements from top layer of the current page inside the viewport:
[Start of page]
[0]<button aria-label=Dismiss />
Apply to TikTok
Current value: 100
100%
Review your application
The employer will also receive a copy of your profile.
Contact info
*[1]<button aria-label=Edit Contact in... type=button>Edit />
Chenyu LI
AI Infra Development
New York, New York, United States
First name
Chenyu
Last name
Li
Phone country code
United States (+1)
Mobile phone number
9295388280
Email address
cl4183@columbia.edu
Mark this job as a top choice
Applicants who let hirers know when a job is their top choice are 43% more likely to hear back.
*[2]<label >Mark job as a top choice />
You can mark 3 jobs as top choice this month
Resume
*[3]<button aria-label=Edit Resume type=button>Edit />
Be sure to include an updated resume in DOC, DOCX or PDF format (less than 2MB).
Chenyu Li Resume_0626.pdf
Last used on 8/12/2025
*[4]<button aria-label=View document>View />
[End of page]
</browser_state>

Current screenshot:

 RESPONSE
{
  "thinking": "Reasoning about agent_history and current state:\n- From the agent_history, we've progressed to the 'Review your application' contact info modal. The todo.md plan is initialized and Work Authorization was completed in prior steps. The current browser_state shows the contact info modal with fields populated (First name Chenyu, Last name Li, phone +1 9295388280, email cl4183@columbia.edu) and interactive Edit button at index 1. The user's request asks me to fill the LinkedIn Easy Apply form step-by-step using the provided personal data and rules.\n- The most recent Next Goal in agent_state/todo is to verify and fill Contact Info. The Contact info modal is visible and the Edit action is available as [1]. According to the browser_rules and efficiency_guidelines, clicking the Edit button and then extracting structured data from the resulting modal is an efficient combined approach to discover all editable fields and ensure we can fill any missing address/LinkedIn/website fields.\n- I judge the last action (clicking Next to advance earlier) as successful (we are at Review contact info). Next, I should click the Edit Contact button (index 1) to open the editable contact form, then extract the structured data of the opened form to see what fields are present (address, city, state, ZIP, LinkedIn, website) so I can fill them according to the user's provided values and the important rules.\n- I'll therefore perform two actions in sequence: click the Edit Contact button (index 1) and then run extract_structured_data on the resulting page to capture all contact fields and their current values. This will allow me to decide what to input next.\n- I will not attempt to upload files or submit the application yet; just gather the editable contact fields now.\n\nPlan for this step:\n1) Click Edit Contact (index 1) to open the editable contact form. 2) Extract structured data from the modal to identify all editable fields and current values so I can fill address, city, state, ZIP, LinkedIn, website per user's data in subsequent steps.\n\nI am proceeding with these two actions now.",
  "evaluation_previous_goal": "Success \u2014 the contact info modal is visible and populated (first name, last name, phone, email) and Edit Contact is available.",
  "memory": "Contact info modal is open showing First name Chenyu, Last name Li, phone +1 9295388280, email cl4183@columbia.edu; Edit Contact button is at index 1; todo.md plan exists and Work Authorization section already completed.",
  "next_goal": "Open the editable Contact Info form (click Edit) and extract the form fields and current values so I can fill in address, city, state, ZIP, LinkedIn, and website next.",
  "action": [
    {
      "click_element_by_index": {
        "index": 1
      }
    },
    {
      "extract_structured_data": {
        "query": "Extract all editable contact information fields and their current values from the contact info modal (first name, last name, phone country code, phone number, email, address, city, state, ZIP, LinkedIn profile, website, resume selection, any other visible contact fields).",
        "extract_links": false
      }
    }
  ]
}