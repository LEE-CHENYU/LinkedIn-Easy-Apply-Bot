 system 
You are an AI agent designed to operate in an iterative loop to automate browser tasks. Your ultimate goal is accomplishing the task provided in <user_request>.

<intro>
You excel at following tasks:
1. Navigating complex websites and extracting precise information
2. Automating form submissions and interactive web actions
3. Gathering and saving information 
4. Using your filesystem effectively to decide what to keep in your context
5. Operate effectively in an agent loop
6. Efficiently performing diverse web tasks
</intro>

<language_settings>
- Default working language: **English**
- Use the language specified by user in messages as the working language
</language_settings>

<input>
At every step, your input will consist of: 
1. <agent_history>: A chronological event stream including your previous actions and their results.
2. <agent_state>: Current <user_request>, summary of <file_system>, <todo_contents>, and <step_info>.
3. <browser_state>: Current URL, open tabs, interactive elements indexed for actions, and visible page content.
4. <browser_vision>: Screenshot of the browser with bounding boxes around interactive elements.
5. <read_state> This will be displayed only if your previous action was extract_structured_data or read_file. This data is only shown in the current step.
</input>

<agent_history>
Agent history will be given as a list of step information as follows:

<step_{step_number}>:
Evaluation of Previous Step: Assessment of last action
Memory: Your memory of this step
Next Goal: Your goal for this step
Action Results: Your actions and their results
</step_{step_number}>

and system messages wrapped in <sys> tag.
</agent_history>

<user_request>
USER REQUEST: This is your ultimate objective and always remains visible.
- This has the highest priority. Make the user happy.
- If the user request is very specific - then carefully follow each step and dont skip or hallucinate steps.
- If the task is open ended you can plan yourself how to get it done.
</user_request>

<browser_state>
1. Browser State will be given as:

Current URL: URL of the page you are currently viewing.
Open Tabs: Open tabs with their indexes.
Interactive Elements: All interactive elements will be provided in format as [index]<type>text</type> where
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description

Examples:
[33]<div>User form</div>
\t*[35]<button aria-label='Submit form'>Submit</button>

Note that:
- Only elements with numeric indexes in [] are interactive
- (stacked) indentation (with \t) is important and means that the element is a (html) child of the element above (with a lower index)
- Elements tagged with `*[` are the new clickable elements that appeared on the website since the last step - if url has not changed.
- Pure text elements without [] are not interactive.
</browser_state>

<browser_vision>
You will be optionally provided with a screenshot of the browser with bounding boxes. This is your GROUND TRUTH: reason about the image in your thinking to evaluate your progress.
Bounding box labels correspond to element indexes - analyze the image to make sure you click on correct elements.
</browser_vision>

<browser_rules>
Strictly follow these rules while using the browser and navigating the web:
- Only interact with elements that have a numeric [index] assigned.
- Only use indexes that are explicitly provided.
- If research is needed, open a **new tab** instead of reusing the current one.
- If the page changes after, for example, an input text action, analyse if you need to interact with new elements, e.g. selecting the right option from the list.
- By default, only elements in the visible viewport are listed. Use scrolling tools if you suspect relevant content is offscreen which you need to interact with. Scroll ONLY if there are more pixels below or above the page. The extract_structured_data action gets the full loaded page content.
- You can scroll by a specific number of pages using the num_pages parameter (e.g., 0.5 for half page, 2.0 for two pages).
- If a captcha appears, attempt solving it if possible. If not, use fallback strategies (e.g., alternative site, backtrack).
- If expected elements are missing, try refreshing, scrolling, or navigating back.
- If the page is not fully loaded, use the wait action.
- You can call extract_structured_data on specific pages to gather structured semantic information from the entire page, including parts not currently visible. The results of extract_structured_data are automatically saved to the file system.
- Call extract_structured_data only if the information you are looking for is not visible in your <browser_state> otherwise always just use the needed text from the <browser_state>.
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.
- If the <user_request> includes specific page information such as product type, rating, price, location, etc., try to apply filters to be more efficient.
- The <user_request> is the ultimate goal. If the user specifies explicit steps, they have always the highest priority.
- If you input_text into a field, you might need to press enter, click the search button, or select from dropdown for completion.
- Don't login into a page if you don't have to. Don't login if you don't have the credentials. 
- There are 2 types of tasks always first think which type of request you are dealing with:
1. Very specific step by step instructions:
- Follow them as very precise and don't skip steps. Try to complete everything as requested.
2. Open ended tasks. Plan yourself, be creative in achieving them.
- If you get stuck e.g. with logins or captcha in open-ended tasks you can re-evaluate the task and try alternative ways, e.g. sometimes accidentally login pops up, even though there some part of the page is accessible or you get some information via web search.
- If you reach a PDF viewer, the file is automatically downloaded and you can see its path in <available_file_paths>. You can either read the file or scroll in the page to see more.
</browser_rules>

<file_system>
- You have access to a persistent file system which you can use to track progress, store results, and manage long tasks.
- Your file system is initialized with a `todo.md`: Use this to keep a checklist for known subtasks. Use `replace_file_str` tool to update markers in `todo.md` as first action whenever you complete an item. This file should guide your step-by-step execution when you have a long running task.
- If you are writing a `csv` file, make sure to use double quotes if cell elements contain commas.
- If the file is too large, you are only given a preview of your file. Use `read_file` to see the full content if necessary.
- If exists, <available_file_paths> includes files you have downloaded or uploaded by the user. You can only read or upload these files but you don't have write access.
- If the task is really long, initialize a `results.md` file to accumulate your results.
- DO NOT use the file system if the task is less than 10 steps!
</file_system>

<task_completion_rules>
You must call the `done` action in one of two cases:
- When you have fully completed the USER REQUEST.
- When you reach the final allowed step (`max_steps`), even if the task is incomplete.
- If it is ABSOLUTELY IMPOSSIBLE to continue.

The `done` action is your opportunity to terminate and share your findings with the user.
- Set `success` to `true` only if the full USER REQUEST has been completed with no missing components.
- If any part of the request is missing, incomplete, or uncertain, set `success` to `false`.
- You can use the `text` field of the `done` action to communicate your findings and `files_to_display` to send file attachments to the user, e.g. `["results.md"]`.
- Combine `text` and `files_to_display` to provide a coherent reply to the user and fulfill the USER REQUEST.
- You are ONLY ALLOWED to call `done` as a single action. Don't call it together with other actions.
- If the user asks for specified format, such as "return JSON with following structure", "return a list of format...", MAKE sure to use the right format in your answer.
- If the user asks for a structured output, your `done` action's schema will be modified. Take this schema into account when solving the task!
</task_completion_rules>

<action_rules>
- You are allowed to use a maximum of 10 actions per step.

If you are allowed multiple actions, you can specify multiple actions in the list to be executed sequentially (one after another).
- If the page changes after an action, the sequence is interrupted and you get the new state. You can see this in your agent history when this happens.
</action_rules>


<efficiency_guidelines>
**IMPORTANT: Be More Efficient with Multi-Action Outputs**

Maximize efficiency by combining related actions in one step instead of doing them separately:

**Highly Recommended Action Combinations:**
- `click_element_by_index` + `extract_structured_data` → Click element and immediately extract information 
- `go_to_url` + `extract_structured_data` → Navigate and extract data in one step
- `input_text` + `click_element_by_index` → Fill form field and submit/search in one step
- `click_element_by_index` + `input_text` → Click input field and fill it immediately
- `click_element_by_index` + `click_element_by_index` → Navigate through multi-step flows (when safe)
- File operations + browser actions 

**Examples of Efficient Combinations:**
```json
"action": [
  {"click_element_by_index": {"index": 15}},
  {"extract_structured_data": {"query": "Extract the first 3 headlines", "extract_links": false}}
]
```

```json
"action": [
  {"input_text": {"index": 23, "text": "laptop"}},
  {"click_element_by_index": {"index": 24}}
]
```

```json
"action": [
  {"go_to_url": {"url": "https://example.com/search"}},
  {"extract_structured_data": {"query": "product listings", "extract_links": false}}
]
```

**When to Use Single Actions:**
- When next action depends on previous action's specific result


**Efficiency Mindset:** Think "What's the logical sequence of actions I would do?" and group them together when safe.
</efficiency_guidelines>

<reasoning_rules>
You must reason explicitly and systematically at every step in your `thinking` block. 

Exhibit the following reasoning patterns to successfully achieve the <user_request>:
- Reason about <agent_history> to track progress and context toward <user_request>.
- Analyze the most recent "Next Goal" and "Action Result" in <agent_history> and clearly state what you previously tried to achieve.
- Analyze all relevant items in <agent_history>, <browser_state>, <read_state>, <file_system>, <read_state> and the screenshot to understand your state.
- Explicitly judge success/failure/uncertainty of the last action.
- If todo.md is empty and the task is multi-step, generate a stepwise plan in todo.md using file tools.
- Analyze `todo.md` to guide and track your progress. 
- If any todo.md items are finished, mark them as complete in the file.
- Analyze whether you are stuck, e.g. when you repeat the same actions multiple times without any progress. Then consider alternative approaches e.g. scrolling for more context or send_keys to interact with keys directly or different pages.
- Analyze the <read_state> where one-time information are displayed due to your previous action. Reason about whether you want to keep this information in memory and plan writing them into a file if applicable using the file tools.
- If you see information relevant to <user_request>, plan saving the information into a file.
- Before writing data into a file, analyze the <file_system> and check if the file already has some content to avoid overwriting.
- Decide what concise, actionable context should be stored in memory to inform future reasoning.
- When ready to finish, state you are preparing to call done and communicate completion/results to the user.
- Before done, use read_file to verify file contents intended for user output.
- Always reason about the <user_request>. Make sure to carefully analyze the specific steps and information required. E.g. specific filters, specific form fields, specific information to search. Make sure to always compare the current trajactory with the user request and think carefully if thats how the user requested it.
</reasoning_rules>

<examples>
Here are examples of good output patterns. Use them as reference but never copy them directly.

<todo_examples>
  "write_file": {
    "file_name": "todo.md",
    "content": "# ArXiv CS.AI Recent Papers Collection Task\n\n## Goal: Collect metadata for 20 most recent papers\n\n## Tasks:\n- [ ] Navigate to https://arxiv.org/list/cs.AI/recent\n- [ ] Initialize papers.md file for storing paper data\n- [ ] Collect paper 1/20: The Automated LLM Speedrunning Benchmark\n- [x] Collect paper 2/20: AI Model Passport\n- [ ] Collect paper 3/20: Embodied AI Agents\n- [ ] Collect paper 4/20: Conceptual Topic Aggregation\n- [ ] Collect paper 5/20: Artificial Intelligent Disobedience\n- [ ] Continue collecting remaining papers from current page\n- [ ] Navigate through subsequent pages if needed\n- [ ] Continue until 20 papers are collected\n- [ ] Verify all 20 papers have complete metadata\n- [ ] Final review and completion"
  }
</todo_examples>

<evaluation_examples>
- Positive Examples:
"evaluation_previous_goal": "Successfully navigated to the product page and found the target information. Verdict: Success"
"evaluation_previous_goal": "Clicked the login button and user authentication form appeared. Verdict: Success"
- Negative Examples:
"evaluation_previous_goal": "Failed to input text into the search bar as I cannot see it in the image. Verdict: Failure"
"evaluation_previous_goal": "Clicked the submit button with index 15 but the form was not submitted successfully. Verdict: Failure"
</evaluation_examples>

<memory_examples>
"memory": "Visited 2 of 5 target websites. Collected pricing data from Amazon ($39.99) and eBay ($42.00). Still need to check Walmart, Target, and Best Buy for the laptop comparison."
"memory": "Found many pending reports that need to be analyzed in the main page. Successfully processed the first 2 reports on quarterly sales data and moving on to inventory analysis and customer feedback reports."
</memory_examples>

<next_goal_examples>
"next_goal": "Click on the 'Add to Cart' button (index 23) to proceed with the purchase flow."
"next_goal": "Scroll down to find more product listings and extract details from the next 5 items on the page."
</next_goal_examples>
</examples>

<output>
You must ALWAYS respond with a valid JSON in this exact format:

{
  "thinking": "A structured <think>-style reasoning block that applies the <reasoning_rules> provided above.",
  "evaluation_previous_goal": "One-sentence analysis of your last action. Clearly state success, failure, or uncertain.",
  "memory": "1-3 sentences of specific memory of this step and overall progress. You should put here everything that will help you track progress in future steps. Like counting pages visited, items found, etc.",
  "next_goal": "State the next immediate goals and actions to achieve it, in one clear sentence."
  "action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]
}

Action list should NEVER be empty.
</output>


 user 
<agent_history>
<sys>
Agent initialized
</sys>
<step_1>
Evaluation of Previous Step: No prior actions performed beyond initialization; ready to create plan and open the application. Verdict: Ready/success.
Memory: No files yet in file system. Current page shows a TikTok job with an Easy Apply button (index 110). Plan initialized and ready to open the Easy Apply overlay. Will use user's provided data to fill fields once the form appears.
Next Goal: Create a todo.md plan, scroll to the bottom to reveal application controls, then click the Easy Apply button (index 110) to open the job application overlay.
Action Results:
Action 1/3: Data written to file todo.md successfully.
Action 2/3: Scrolled down the page by one page
Action 3/3: Element index changed after action 2 / 3, because page changed.
</step_1>
<step_2>
Evaluation of Previous Step: Successfully created todo.md and scrolled the job page; ready to open Easy Apply (Verdict: Success).
Memory: todo.md was initialized with the step plan for the LinkedIn Easy Apply flow; the job listings page is open and the Easy Apply button for the TikTok listing is available as interactive element [92]. Prepared to open the Easy Apply overlay.
Next Goal: Scroll to the bottom of the job page/overlay to reveal navigation buttons, then click the Easy Apply button (index 92) to open the application overlay.
Action Results:
Action 1/2: Scrolled down the page by one page
Action 2/2: Something new appeared after action 1 / 2, following actions are NOT executed and should be retried.
</step_2>
<step_3>
Evaluation of Previous Step: Previous actions (initializing todo.md and scrolling) succeeded and the page shows the TikTok job with an Easy Apply button available; Verdict: Success.
Memory: todo.md created with the LinkedIn Easy Apply plan; currently on LinkedIn jobs results page and the TikTok listing's Easy Apply button is present as interactive element [92]. Ready to open the Easy Apply overlay.
Next Goal: Scroll down to reveal any hidden controls and then click the Easy Apply button (index 92) to open the application overlay so I can begin filling the form.
Action Results:
Action 1/2: Scrolled down the page by one page
Action 2/2: Something new appeared after action 1 / 2, following actions are NOT executed and should be retried.
</step_3>
</agent_history>
<agent_state>
<user_request>
You are helping fill out a LinkedIn job application for Content Creator at Unknown. Please follow these guidelines:

PERSONAL INFORMATION:
- First Name: Chenyu
- Last Name: Li
- Phone: 9295388280
- Email: Use any existing email field values
- Address: 601 W 110th St
- City: New York, New York
- State: New York
- ZIP: 10025
- LinkedIn: linkedin.com/in/chenyu-li-50a81b156
- Website: https://github.com/LEE-CHENYU

WORK AUTHORIZATION:
- Legally authorized to work in US: Yes
- Require visa sponsorship: No
- Have driver's license: Yes
- Can start immediately: Yes
- Comfortable commuting: Yes
- Background check: Yes

EDUCATION:
- GPA: 3.7
- Completed degrees: High School Diploma, Bachelor's Degree, Master's Degree

EXPERIENCE (in years):
Technology Skills: {'python': 5, 'default': 1}
Industry Experience: {'Accounting/Auditing': 1, 'Administrative': 0, 'Advertising': 0, 'Analyst': 1, 'Art/Creative': 0}
Default experience for unlisted skills: 1 years

LANGUAGES:
{'english': 'Professional', 'chinese': 'Native or bilingual', 'japanese': 'Professional'}

IMPORTANT RULES:
1. For "years of experience" questions, match the technology/skill mentioned to the values above
2. For yes/no questions, use the work authorization values above
3. For dropdown selections, choose the most appropriate option based on the context
4. For text fields without specific matches, use reasonable defaults
5. For file uploads, skip them (they should be handled separately)
6. For EEO questions (gender, race, veteran status), select "Prefer not to answer" or "Decline to answer"
7. Always click "Continue" or "Next" buttons to proceed through the form
8. If you encounter "Submit Application", only click it if all required fields are properly filled

CRITICAL BUTTON DETECTION:
9. ALWAYS scroll down to the bottom of the page to check for Next/Continue/Submit/Review buttons
10. Many LinkedIn forms have buttons stuck at the bottom that are not visible without scrolling
11. Before looking for buttons, scroll to the bottom of the page first, then scroll back up if needed
12. If you cannot find Next/Continue buttons, scroll down completely and look again
13. Look for buttons with text like: "Next", "Continue", "Review", "Submit Application", "Review your application"

SCROLLING INSTRUCTIONS:
- Always scroll down to reveal hidden form elements and buttons
- Some forms have multiple sections that only become visible after scrolling
- Check both top and bottom of the page for navigation buttons
- If stuck, try scrolling to reveal more content or buttons

Please fill out this LinkedIn job application form step by step, following these instructions carefully.
</user_request>
<file_system>

</file_system>
<todo_contents>
# LinkedIn Easy Apply — Content Creator (Unknown) Application Plan

## Goal: Complete LinkedIn Easy Apply for Content Creator using provided user data

## Steps:
- [ ] Initialize plan (this file)
- [ ] Open the job application by clicking Easy Apply on the job detail (index 110)
- [ ] Scroll to bottom of each application page/overlay to reveal Next/Continue/Submit buttons
- [ ] Fill PERSONAL INFORMATION using provided values:
  - First Name: Chenyu
  - Last Name: Li
  - Phone: 9295388280
  - Email: use existing email field value on form
  - Address: 601 W 110th St, New York, New York, 10025
  - LinkedIn: linkedin.com/in/chenyu-li-50a81b156
  - Website: https://github.com/LEE-CHENYU
- [ ] Fill WORK AUTHORIZATION questions according to provided answers (authorized: Yes, sponsorship: No, driver's license: Yes, start immediately: Yes, comfortable commuting: Yes, background check: Yes)
- [ ] Fill EDUCATION (GPA 3.7, High School Diploma, Bachelor's, Master's)
- [ ] Fill EXPERIENCE fields mapping technology/skills to years (python:5, default:1; industry experience per provided mapping)
- [ ] Fill LANGUAGES per mapping (english: Professional, chinese: Native or bilingual, japanese: Professional)
- [ ] For EEO questions select "Prefer not to answer" / "Decline to answer"
- [ ] Skip file uploads
- [ ] Click Continue/Next between sections; only click Submit if all required fields are filled
- [ ] If stuck, scroll fully or extract structured data from overlay to locate missing fields
- [ ] Mark items complete in this todo.md as they are finished



</todo_contents>
<step_info>
Step 4 of 15 max possible steps
Current date and time: 2025-08-12 19:56
</step_info>
</agent_state>
<browser_state>
Current tab: 0
Available tabs:
Tab 0: https://www.linkedin.com/jobs/search/?currentJobId=4271843424&distance=100&f_E=2%2C3&f_JT=F%2CP&f_TPR=r2592000&keywords=Strategist&location=Seattle&origin=JOB_SEARCH_PAGE_JOB_FILTER - (3) Strategist Jobs in Seattle

Page info: 2560x1440px viewport, 2560x1440px total page size, 0.0 pages above, 0.0 pages below, 1.0 total pages, at 0% of page
Interactive elements from top layer of the current page inside the viewport:
[Start of page]
[0]<a  />
	[1]<div  />
		[2]<div  />
[3]<label >Search by title, skill, or company />
[4]<input role=combobox aria-label=Search by title... aria-expanded=false type=text />
[5]<label >City, state, or zip code />
[6]<input role=combobox aria-label=City, state, or... aria-expanded=false type=text />
[7]<button type=button>Search />
[8]<a >Home />
	[9]<div  />
		[10]<span >new feed updates notifications />
		[11]<div  />
			[12]<div  />
[13]<a >My Network />
	[14]<div  />
		[15]<span >2
2 new network updates notifications />
		[16]<div  />
			[17]<div  />
[18]<a >Jobs />
	[19]<div  />
		[20]<div  />
[21]<a >Messaging />
	[22]<div  />
		[23]<div  />
[24]<a >Notifications />
	[25]<div  />
		[26]<span >1
1 new notification />
		[27]<div  />
			[28]<div  />
[29]<button aria-expanded=false type=button>Me />
[30]<button aria-expanded=false type=button>For Business />
	[31]<div  />
		[32]<div  />
[33]<a >Learning />
	[34]<div  />
		[35]<div  />
[36]<div  />
	[37]<button aria-expanded=false aria-label=Filter by: Jobs type=button>Jobs />
[38]<button aria-expanded=false aria-label=Date posted fil... type=button>Past month />
[39]<button aria-expanded=false aria-label=Experience leve... type=button>Experience level
2 />
[40]<button aria-expanded=false aria-label=Job type filter... type=button>Job type
2 />
[41]<button aria-checked=true aria-label=Distance filter... aria-expanded=false type=button>100 mi />
[42]<button aria-label=Show all filter... type=button>All filters />
[43]<button aria-label=Reset applied f... type=button>Reset />
[44]<button >Try the new job search />
Strategist in Seattle, Washington, United States
123 results
[45]<div >Set alert
Set job alert for Strategist in Seattle />
[46]<div >TikTok
Seattle, WA (On-site)
$83.6K/yr - $143.6K/yr · 401(k), Vision, +1 benefit
Actively reviewing applicants
Viewed
Promoted
Easy Apply />
	[47]<a >TikTok Shop - Strategy and Analytics Associate, Customer Growth with verification />
		[48]<span >TikTok Shop - Strategy and Analytics Associate, Customer Growth />
	[49]<button aria-label=Dismiss TikTok ... type=button />
		[50]<span  />
[51]<div >Coinbase
United States (Remote)
Actively reviewing applicants
Promoted
Easy Apply />
	[52]<a >Business Operations & Strategy Associate / Senior Associate with verification />
		[53]<span >Business Operations & Strategy Associate / Senior Associate />
	[54]<button aria-label=Dismiss Busines... type=button />
		[55]<span  />
[56]<div >Crypto.com
United States (Remote)
Medical benefit
Actively reviewing applicants
Promoted
Easy Apply />
	[57]<a >Strategy Associate / Senior Strategy Associate with verification />
		[58]<span >Strategy Associate / Senior Strategy Associate />
	[59]<button aria-label=Dismiss Strateg... type=button />
		[60]<span  />
[61]<div >Curology
United States (Remote)
$75K/yr - $90K/yr · 401(k), Vision, +1 benefit
Actively reviewing applicants
Promoted
Easy Apply />
	[62]<a >Associate Product Marketing Manager with verification />
		[63]<span >Associate Product Marketing Manager />
	[64]<button aria-label=Dismiss Associa... type=button />
		[65]<span  />
[66]<div >BCG X
Seattle, WA
401(k), Medical, Vision
35 school alumni work here
35 Columbia University school alumni work here
Promoted />
	[67]<a >(Associate) Growth Architect, United States – BCG X with verification />
		[68]<span >(Associate) Growth Architect, United States – BCG X />
	[69]<button aria-label=Dismiss (Associ... type=button />
		[70]<span  />
[71]<div >River
United States (Remote)
$115K/yr - $160K/yr · Vision, 401(k)
Promoted />
	[72]<a >Growth Marketer with verification />
		[73]<span >Growth Marketer />
	[74]<button aria-label=Dismiss Growth ... type=button />
		[75]<span  />
[76]<div >UN/COMMON
United States (Remote)
$85K/yr · Vision benefit
2 weeks ago
Easy Apply />
	[77]<a >Strategist, Lifecycle Marketing />
		[78]<span >Strategist, Lifecycle Marketing />
	[79]<button aria-label=Dismiss Strateg... type=button />
		[80]<span  />
[81]<div >Quisitive
United States (Remote)
Promoted />
	[82]<a >AI Strategist with verification />
		[83]<span >AI Strategist />
	[84]<button aria-label=Dismiss AI Stra... type=button />
		[85]<span  />
[86]<div >Experian
United States (Remote)
$71.6K/yr - $124.2K/yr · 401(k) benefit
Actively reviewing applicants
Promoted
Easy Apply />
	[87]<a >UX Designer (Remote) with verification />
		[88]<span >UX Designer (Remote) />
	[89]<button aria-label=Dismiss UX Desi... type=button />
		[90]<span  />
[91]<a >TikTok Shop - Strategy and Analytics Associate, Customer Growth />
TikTok · Seattle, WA (On-site)
[92]<button aria-label=Easy Apply to T...>Easy Apply />
[93]<button aria-expanded=false type=button>Save
Save TikTok Shop - Strategy and Analytics Associate, Customer Growth   at TikTok />
[94]<div  />
	[95]<button aria-expanded=false type=button>Show more options />
Total employees
Company-wide
2 year growth
Business Development
2 year growth
*[96]<div  />
Median employee tenure ‧
1.8 years
TikTok hires candidates from some of these companies and schools
TikTok hired 314 people from Columbia University.
*[97]<a >See all />
Competitors
ByteDance, through its flagship app TikTok, operates in a highly competitive short-form video content market. The primary competitors include Instagram Reels, YouTube Shorts, and Snapchat Spotlight. These platforms are vying for user engagement and content creation, leveraging their existing user bases and introducing new features to attract creators and viewers. ByteDance's strategic imperatives include maintaining user engagement, expanding its content offerings, and navigating regulatory challenges, particularly in the US market.
…
*[98]<button aria-expanded=false aria-label=Show more about... type=button>show more />
*[99]<a  />
	*[100]<div  />
		*[101]<div  />
			*[102]<div  />
				*[103]<div  />
*[104]<a  />
	*[105]<div  />
		*[106]<div  />
			*[107]<div  />
				*[108]<div  />
Sources:
clearvoice.com
+2 more
*[109]<button aria-label=Mark feedback a... />
*[110]<button aria-label=Mark feedback a... />
*[111]<a >Show more Premium insights />
About the company
*[112]<a  />
*[113]<a >TikTok />
3,571,031 followers
*[114]<button type=button>Following />
Entertainment Providers
10,001+ employees
73,709 on LinkedIn
TikTok is the world's leading destination for short-form video. Our platform is built to help imaginations thrive. This is doubly true of the teams that make TikTok possible.
Our employees lead with curiosity, and move at the speed of culture. Combined with our company's flat structure, you'll be given dynamic opportunities to make a real impact on a rapidly expanding company as you grow your career. We have offices across Asia Pacific, the Middle East, Europe, and the Americas – and we're just getting started.
…
*[115]<button aria-expanded=false type=button>show more />
Interested in working with us in the future?
Members who share that they’re interested in a company may be 2x as likely to get a message from a recruiter than those who don’t.
*[116]<a >Learn more />
*[117]<button >I’m interested />
Company photos
*[118]<button aria-label=Company photos ... type=button>Next />
[119]<div >Status is offline />
	[120]<button type=button />
		[121]<span >Messaging
You are on the messaging overlay. Press enter to open the list of conversations. />
[122]<div  />
	[123]<button aria-expanded=false type=button />
[124]<button >Compose message />
[125]<button >You are on the messaging overlay. Press enter to open the list of conversations. />
[End of page]
</browser_state>

Current screenshot:

 RESPONSE
{
  "thinking": "I reviewed the agent history and current page: todo.md has been initialized and the LinkedIn job results page is open with the TikTok listing visible. The user instructed that I must always scroll to reveal navigation buttons, but the Easy Apply control for the TikTok listing is already exposed in the page interactive elements as [92]. The previous step successfully scrolled and left the page ready to open the Easy Apply overlay. My immediate objective is to open the application overlay so I can begin filling fields according to the user's profile and rules. According to the browser rules and efficiency guidelines, I will click the Easy Apply button [92] and then immediately extract the structured content of the resulting overlay to locate the form fields and Next/Continue/Submit buttons. If the overlay does not appear or important fields are hidden, I'll use extracted structured data to find missing elements and then scroll as required. I will not upload files and will follow the user's mapping for years of experience, authorization, EEO responses, etc., when filling fields after I can see them. For now the correct safe action is to open the Easy Apply overlay and capture its structured content.",
  "evaluation_previous_goal": "Previous step prepared the page and scrolled successfully; ready to open the Easy Apply overlay (Verdict: Success).",
  "memory": "todo.md has been created with the LinkedIn Easy Apply plan. The job results page is open and the TikTok listing's Easy Apply button is available as interactive element [92]. No application overlay yet.",
  "next_goal": "Click the Easy Apply button (index 92) to open the application overlay and then extract the overlay's structured fields and buttons so I can locate the Next/Continue/Submit controls.",
  "action": [
    {
      "click_element_by_index": {
        "index": 92
      }
    },
    {
      "extract_structured_data": {
        "query": "Extract all visible form fields, labels, dropdowns, radio buttons, checkboxes, and navigation buttons (Next, Continue, Review, Submit Application) from the application overlay that opens after clicking Easy Apply. For each field include type (text/input, phone, email, dropdown, radio, checkbox, file upload), label text, and whether it appears required.",
        "extract_links": false
      }
    }
  ]
}