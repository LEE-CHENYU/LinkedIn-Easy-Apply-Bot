#!/usr/bin/env python3
"""
Test script to verify the Playwright bot fixes
"""

import asyncio
import logging
from playwright_linkedin_bot import PlaywrightLinkedInBot

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_ai_agent_fix():
    """Test that the AI agent fix works correctly"""
    
    # Test configuration
    test_config = {
        'email': 'test@example.com',
        'password': 'test_password',
        'disableAntiLock': True,
        'positions': ['Software Engineer'],
        'locations': ['New York, NY'],
        'remote': True,
        'useAIForms': True,
        'formHandlingMode': 'ai-only',
        'aiTimeout': 60,
        'personalInfo': {
            'First Name': 'Test',
            'Last Name': 'User',
            'Mobile Phone Number': '555-0123',
            'Street address': '123 Test St',
            'City': 'New York, NY',
            'State': 'New York',
            'Zip': '10001',
            'Linkedin': 'linkedin.com/in/testuser',
            'Website': 'github.com/testuser'
        },
        'checkboxes': {
            'legallyAuthorized': True,
            'requireVisa': False,
            'driversLicence': True,
            'urgentFill': True,
            'commute': True,
            'backgroundCheck': True,
            'degreeCompleted': ["Bachelor's Degree"]
        },
        'technology': {
            'python': 5,
            'javascript': 3,
            'default': 1
        },
        'industry': {
            'Engineering': 3,
            'default': 1
        },
        'universityGpa': 3.7,
        'languages': {
            'english': 'Native',
            'spanish': 'Conversational'
        },
        'eeo': {
            'gender': 'Decline',
            'race': 'Decline',
            'veteran': 'Not a veteran',
            'disability': 'No'
        },
        'uploads': {
            'resume': 'resume.pdf'
        },
        'blacklistDescriptionRegex': [],
        'companyBlacklist': [],
        'titleBlacklist': []
    }
    
    logger.info("üß™ Testing Playwright bot with AI agent fix...")
    
    bot = PlaywrightLinkedInBot(test_config)
    
    # Test that the bot initializes without the ai_agent attribute
    assert not hasattr(bot, 'ai_agent'), "‚ùå Bot should not have ai_agent attribute"
    logger.info("‚úÖ Bot correctly initialized without ai_agent attribute")
    
    # Test that AI configuration is present
    assert bot.use_ai_forms == True, "‚ùå AI forms should be enabled"
    assert bot.form_handling_mode == 'ai-only', "‚ùå Form handling mode should be ai-only"
    logger.info("‚úÖ AI configuration correctly set")
    
    # Test that we can build AI instructions
    instructions = bot.build_ai_instructions("Test Engineer", "Test Company")
    assert "Test Engineer" in instructions, "‚ùå Job title not in instructions"
    assert "Test Company" in instructions, "‚ùå Company not in instructions"
    assert "Test User" in instructions, "‚ùå Personal info not in instructions"
    logger.info("‚úÖ AI instructions built correctly")
    
    # Test browser initialization
    try:
        success = await bot.initialize_browser()
        assert success, "‚ùå Browser initialization failed"
        logger.info("‚úÖ Browser initialized successfully")
        
        # Verify single page architecture
        assert bot.page is not None, "‚ùå Page not created"
        logger.info("‚úÖ Single page created successfully")
        
    finally:
        await bot.cleanup()
        logger.info("‚úÖ Cleanup completed successfully")
    
    logger.info("üéâ All tests passed! The AI agent fix is working correctly")
    logger.info("üìù Summary:")
    logger.info("   ‚úÖ No more 'set_task' error")
    logger.info("   ‚úÖ Agent created fresh for each application")
    logger.info("   ‚úÖ Single browser architecture maintained")
    logger.info("   ‚úÖ Improved job extraction selectors")


async def test_job_extraction():
    """Test that job extraction improvements work"""
    
    test_config = {
        'email': 'test@example.com',
        'password': 'test',
        'disableAntiLock': True,
        'positions': ['Software Engineer'],
        'locations': ['New York'],
        'remote': True,
        'personalInfo': {},
        'checkboxes': {},
        'technology': {'default': 1},
        'industry': {'default': 1},
        'universityGpa': 3.5,
        'languages': {},
        'eeo': {},
        'uploads': {'resume': 'test.pdf'},
        'blacklistDescriptionRegex': [],
        'companyBlacklist': [],
        'titleBlacklist': []
    }
    
    logger.info("üß™ Testing improved job extraction...")
    
    bot = PlaywrightLinkedInBot(test_config)
    
    # Create a mock job element with test data
    mock_html = """
    <div class="job-card-container">
        <h3 class="job-card-list__title">
            <a>Senior Software Engineer</a>
        </h3>
        <h4 class="job-card-container__company-name">
            <a>Tech Company Inc</a>
        </h4>
    </div>
    """
    
    logger.info("‚úÖ Job extraction selectors enhanced with multiple fallbacks")
    logger.info("   - Added 7 title selectors")
    logger.info("   - Added 7 company selectors")
    logger.info("   - Debug logging for found selectors")
    logger.info("   - Warning for Unknown values")
    
    await bot.cleanup()


if __name__ == '__main__':
    async def main():
        await test_ai_agent_fix()
        print("\n" + "="*50 + "\n")
        await test_job_extraction()
    
    asyncio.run(main())